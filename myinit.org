#+TITLE: Init File
#+AUTHOR: Yilkal Argaw , StackOverflow, Github and Emacs-wiki

* initial setup
#+BEGIN_SRC emacs-lisp

(setq package-list
    '(use-package telephone-line hydra ivy flx counsel swiper ivy-hydra nlinum 
       undo-tree which-key magit yasnippet yasnippet-snippets flycheck expand-region
       avy ace-window ag rust-mode go-mode csv-mode yaml-mode toml-mode json-mode
       multiple-cursors projectile markdown-mode markdown-mode+ markdown-preview-mode
       markdown-toc smartparens ecb restclient neotree all-the-icons company 
       company-c-headers lua-mode company-lua robe inf-ruby auctex company-auctex
       web-mode company-web emmet-mode js2-mode tern company-tern php-mode 
       company-php ox-gfm htmlize org-bullets org-beautify-theme org-tree-slide
       epresent skewer-mode))


; activate all the packages
(package-initialize)

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(require 'use-package)

#+END_SRC

* Interface settings

#+BEGIN_SRC emacs-lisp
;; Turn off mouse interface early in startup to avoid momentary display
;; (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
;; (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
;; (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;; although things could be done here the above settings are taken to init.el
;; to avoid the early show
;interface settings
(if (display-graphic-p)
    (progn
      (setq initial-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94) ; chars
              (height . 52) ; lines
;              (background-color . "honeydew")
              ;;
              ))

      (setq default-frame-alist
            '(
              (tool-bar-lines . 0)
              (width . 94)
              (height . 52)
;              (background-color . "honeydew")
              ;;
              ))
   
(set-frame-position (selected-frame) 0 15)
;;(set-face-attribute 'default nil :height 93 )

))


(add-hook 'after-make-frame-functions
	  (lambda (frame)
	      (select-frame frame)
	      (if (display-graphic-p)
		  (progn
		    (set-frame-size frame 94 52)
		    (set-frame-position frame 0 15)
		    (set-frame-font "Liberation Mono-9.5" nil t)
		    (set-face-attribute 'default nil :height 93 )
		    )))
	    )

(add-to-list 'default-frame-alist '(font . "Liberation Mono-9.5") )

(setq inhibit-startup-message t)
(show-paren-mode t)
(global-set-key (kbd "C-c m b") 'menu-bar-mode)
(column-number-mode 1)
(toggle-indicate-empty-lines t)

(add-to-list 'default-frame-alist '(font . "Liberation Mono-9.5") )

#+END_SRC

* themes

#+BEGIN_SRC emacs-lisp

(load-theme 'modified-dracula t)

#+END_SRC

* Default directory

#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

* telephone-line

#+BEGIN_SRC emacs-lisp

(use-package telephone-line
  :ensure t
  :defer t

  :config (progn (setq telephone-line-lhs
  		     '((accent . (telephone-line-vc-segment
  				  telephone-line-erc-modified-channels-segment
  				  telephone-line-process-segment))
  		       (evil    . (telephone-line-buffer-segment
  				 ; telephone-line-minor-mode-segment
				  ))))
  	       ;; (setq telephone-line-rhs
  	       ;; 	     '((nil    . (telephone-line-misc-info-segment))
  	       ;; 	       (accent . (telephone-line-major-mode-segment))
  	       ;; 	        ))
))

(add-hook 'after-make-frame-functions
	  (lambda (frame)
	    (select-frame frame)
	    (if (not (display-graphic-p))
		(progn
		  (setq telephone-line-primary-right-separator 'telephone-line-abs-left
			telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
			telephone-line-primary-left-separator 'telephone-line-abs-left
			telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
		  (setq telephone-line-subseparator '())
		  (telephone-line-mode 1))
		(progn
	          (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
			telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
			telephone-line-primary-right-separator 'telephone-line-cubed-left
			telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
		  (setq telephone-line-subseparator-faces '())
		  (setq telephone-line-height 25)
                  (telephone-line-mode 1)
                  )
		  )
;(telephone-line-mode)
));)

;
;(add-hook 'after-init-hook
;(add-hook 'telephone-line-mode-hook
;	  (lambda ()
	    (if (not (display-graphic-p))
		(progn
		  (setq telephone-line-primary-right-separator 'telephone-line-abs-left
			telephone-line-secondary-right-separator 'telephone-line-abs-hollow-left
			telephone-line-primary-left-separator 'telephone-line-abs-left
			telephone-line-secondary-left-separator 'telephone-line-abs-hollow-left)
		  (setq telephone-line-subseparator '())
		  
		  (telephone-line-mode 1))
		(progn
		  (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
			telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
			telephone-line-primary-right-separator 'telephone-line-cubed-left
			telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-left)
		  (setq telephone-line-subseparator-faces '())
		  (setq telephone-line-height 25)
		  (telephone-line-mode 1)
                  )
;                  (telephone-line-mode)
)
;;))
;
;;(telephone-line-mode)

#+END_SRC

* Indentation Stuff

#+BEGIN_SRC emacs-lisp

;;; to setup tabs
(setq c-basic-indent 2)
(setq tab-width 4)
(setq indent-tabs-mode nil)

#+END_SRC

* hydra

#+BEGIN_SRC emacs-lisp

;;hydra
(use-package hydra
  :ensure t
;  :defer t
  )

#+END_SRC

** hydra-zoom

#+BEGIN_SRC emacs-lisp

(defhydra hydra-zoom (global-map "<f10>")
  "zoom"
  ("g" text-scale-increase "in")
  ("l" text-scale-decrease "out"))


#+END_SRC

** hydra-hideshow(hydra-hs)

#+BEGIN_SRC emacs-lisp

(defhydra hydra-hs (:idle 1.0)
   "
Hide^^            ^Show^            ^Toggle^    ^Navigation^
----------------------------------------------------------------
_h_ hide all      _s_ show all      _t_oggle    _n_ext line
_d_ hide block    _a_ show block              _p_revious line
_l_ hide level

_SPC_ cancel
"
   ("s" hs-show-all)
   ("h" hs-hide-all)
   ("a" hs-show-block)
   ("d" hs-hide-block)
   ("t" hs-toggle-hiding)
   ("l" hs-hide-level)
   ("n" forward-line)
   ("p" (forward-line -1))
   ("SPC" nil)
)

;;(global-set-key (kbd "C-c @") 'hydra-hs/body) ;;example-binding

#+END_SRC

** hydra-apropos

#+BEGIN_SRC emacs-lisp

(defhydra hydra-apropos (:color blue)
  "Apropos"
  ("a" apropos "apropos")
  ("c" apropos-command "cmd")
  ("d" apropos-documentation "doc")
  ("e" apropos-value "val")
  ("l" apropos-library "lib")
  ("o" apropos-user-option "option")
  ("u" apropos-user-option "option")
  ("v" apropos-variable "var")
  ("i" info-apropos "info")
  ("t" tags-apropos "tags")
  ("z" hydra-customize-apropos/body "customize"))

(defhydra hydra-customize-apropos (:color blue)
  "Apropos (customize)"
  ("a" customize-apropos "apropos")
  ("f" customize-apropos-faces "faces")
  ("g" customize-apropos-groups "groups")
  ("o" customize-apropos-options "options"))


(global-set-key (kbd "C-H") 'hydra-apropos/body) ;;example-binding

#+END_SRC

* ivy,consel and swiper

#+BEGIN_SRC emacs-lisp

(use-package ivy :demand
  :ensure t
  :init (ivy-mode 1)
        (use-package flx
	  :ensure t
	  )
    
	(setq ivy-re-builders-alist
	      '((swiper . ivy--regex-plus)
		(counsel-grep  . ivy--regex-plus)
		(counsel-git-grep . ivy--regex-plus)
		(t . ivy--regex-fuzzy)))
  
	(setq ivy-initial-inputs-alist nil)
	(setq ivy-format-function 'ivy-format-function-line)

	:config (setq ivy-use-virtual-buffers t
		      ivy-count-format "%d/%d ")

	:bind ("C-x b" . ivy-switch-buffer)
              ("C-x C-b" . ivy-switch-buffer)
	      ("C-c C-r" . ivy-resume)
  )

(use-package counsel
  :ensure t
  :defer t
  :bind(
	("C-x C-f" . counsel-find-file)
	("M-x" . counsel-M-x)
	("H-f" . counsel-ag)
	("C-c M-?" . counsel-ag))
  )
(use-package swiper
  :ensure t
  :defer t
  :bind (("M-s s" . swiper))
  )

;;(use-package hydra
;;  :ensure t
;;  :after ivy
;;)

(use-package ivy-hydra
  :ensure t
  :after (ivy hydra))

#+END_SRC

* backup

#+BEGIN_SRC emacs-lisp

;;backups
(setq backup-directory-alist '((".*" . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms
      `((".*" ,"~/.emacs.d/backups" t)))
(setq backup-by-copying t)

#+END_SRC

* clipboard

#+BEGIN_SRC emacs-lisp

(setq select-enable-clipboard t)

#+END_SRC

* yes,no

#+BEGIN_SRC emacs-lisp

(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

* line-number

#+BEGIN_SRC emacs-lisp

(if (version< emacs-version "26.0")
    (linum-relative-global-mode)
    (progn  (setq display-line-numbers-type (quote relative))
	    (global-display-line-numbers-mode))
    )

#+END_SRC

* nlinum-mode

#+BEGIN_SRC emacs-lisp

;;nlinum mode
(use-package nlinum
  :ensure t
  :config  (setq nlinum-highlight-current-line t)
           (setq nlinum-use-right-margin t)

  :defer t
    )
(add-hook 'after-init-hook 'global-nlinum-mode t)

#+END_SRC

* line-highlight

#+BEGIN_SRC emacs-lisp

(global-hl-line-mode)

#+END_SRC

* undo-tree

#+BEGIN_SRC emacs-lisp

;;undo-tree
(use-package undo-tree
  :diminish undo-tree-mode
  :defer 4
 ;:bind ("H-/" . undo-tree-visualize)
  :config (global-undo-tree-mode))

#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp

;;which mode
(use-package which-key
  :ensure t
  :defer 2
  :config (which-key-mode)
  )

#+END_SRC

* magit

#+BEGIN_SRC emacs-lisp

;;magit
(use-package magit
  :ensure t
  :defer t
  )

(global-set-key (kbd "C-C g m") 'magit-status)
(global-set-key (kbd "H-g") 'magit-status)

#+END_SRC

* yasnippet

#+BEGIN_SRC emacs-lisp

;;yasnippet
(use-package yasnippet
  :ensure t
  :defer 2
  :diminish yas-minor-mode
  :init (use-package yasnippet-snippets
	  :ensure t
	  :defer t
	  )
  :config (yas-global-mode 1)
  )


;;(add-hook 'prog-mode-hook 'yas-minor-mode)

#+END_SRC

* flycheck

#+BEGIN_SRC emacs-lisp

;;flycheck
(use-package flycheck
:ensure t
:init
(global-flycheck-mode t))

;(add-hook 'prog-mode-hook 'flycheck-mode)

#+END_SRC

* expand-region

#+BEGIN_SRC emacs-lisp

;;;expand-region
(use-package expand-region
  :ensure t
  :defer 3
  :bind ("C-=" . er/expand-region)
;;     :config  (local-set-key (kbd "C-;") 'iedit-mode)
  )

#+END_SRC

* avy

#+BEGIN_SRC emacs-lisp

;;;avy
(use-package avy
  :ensure t
  :defer t
  :bind ("C-c v c" . avy-goto-char)
  ("C-c v 2" . avy-goto-char-2)
  ("C-c v w" . avy-goto-word-1)
  ("C-c v l" . avy-goto-line)
;  :config  (local-set-key (kbd "C-;") 'iedit-mode)
  )

#+END_SRC

* ace-window

#+BEGIN_SRC emacs-lisp

;;ace-window
(use-package ace-window
  :ensure t
;  :defer 3
  :bind ("H-o" . ace-window)
  ("C-c w n" . ace-window)
  )

#+END_SRC

* ag

#+BEGIN_SRC emacs-lisp

;;ag
(use-package ag
  :ensure t
  :defer t
  )

#+END_SRC

* rust

#+BEGIN_SRC emacs-lisp

;;rust
    (use-package rust-mode
      :ensure t
      :defer t)

#+END_SRC

* go

#+BEGIN_SRC emacs-lisp

;;go
    (use-package go-mode
      :ensure t
      :defer t)

#+END_SRC

* csv

#+BEGIN_SRC emacs-lisp

;;csv
    (use-package csv-mode
      :ensure t
      :defer t)

#+END_SRC

* yaml,toml and json

#+BEGIN_SRC emacs-lisp

;;yaml,toml and json
    (use-package yaml-mode
      :ensure t
      :defer t)
    (use-package toml-mode
      :ensure t
      :defer t)
    (use-package json-mode
      :ensure t
      :defer t)

#+END_SRC

* multiple-cursors

#+BEGIN_SRC emacs-lisp

;;multiple-cursors
(use-package multiple-cursors
  :ensure t
  :defer t
  :config (define-key mc/keymap (kbd "<return>") nil)
  :bind ("H-=" . mc/unmark-previous-like-this)
        ("H-]" . mc/mark-next-like-this)
        ("H-[" . mc/mark-previous-like-this)
		("H-\'" . mc/unmark-next-like-this)
		("H-\\" . mc/mark-all-like-this)
		("C-S-<mouse-1>" . mc/add-cursor-on-click)
)

#+END_SRC

** Hydra-multiple-cursors

#+BEGIN_SRC emacs-lisp

(defhydra hydra-multiple-cursors (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil))

(global-set-key (kbd "C-c m c") 'hydra-multiple-cursors/body) ;;example-binding

#+END_SRC

* markdown

#+BEGIN_SRC emacs-lisp

;;markdown
  (use-package markdown-mode
  :ensure t
  :defer t
  :config 
  (use-package markdown-mode+
  :ensure t)
  (use-package markdown-preview-mode
  :ensure t)
  (use-package markdown-toc
  :ensure t)
  )
(autoload 'markdown-mode "markdown-mode" "Major mode for Markdown files" t)
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
(setq markdown-command "pandoc -c ~/.emacs.d/github-pandoc.css --from gfm -t html5 --mathjax --highlight-style pygments --standalone")

#+END_SRC

* smartparens

#+BEGIN_SRC emacs-lisp

(use-package smartparens-config
    :ensure smartparens
    :config
    (progn
      (show-smartparens-global-mode t)))

(add-hook 'prog-mode-hook #'smartparens-mode)
(add-hook 'markdown-mode-hook #'smartparens-mode)
;;(add-hook 'web-mode-hook (lambda () (smartparens-mode -1)))
(sp-local-pair 'web-mode  "<%" "%>" :wrap "C-%")
;;(sp-local-pair 'web-mode  "<%=" "%>" :wrap "C-%")


#+END_SRC

* ecb

#+BEGIN_SRC emacs-lisp

;;ecb
  (use-package ecb
  :ensure t
  :defer t
  :init (setq ecb-tip-of-the-day nil)
  :bind (( "C-c e b" . ecb-minor-mode)
        :map ecb-mode-map
		("H-1" . 'ecb-goto-window-edit1)
		("H-2" . 'ecb-goto-window-directories)
		("H-3" . 'ecb-goto-window-sources)
		("H-4" . 'ecb-goto-window-methods)
		("H-5" . 'ecb-goto-window-history)) 
)

#+END_SRC

* rest client

#+BEGIN_SRC emacs-lisp

(use-package restclient
  :ensure t
  :defer t)

#+END_SRC

* smooth-scrolling

#+BEGIN_SRC emacs-lisp

;;smooth-scrolling
;; (use-package smooth-scrolling
;;   :ensure t
;;   :config (setq smooth-scroll-margin 2)
;;   )
;; scroll one line at a time (less "jumpy" than defaults)
    
(setq mouse-wheel-scroll-amount '(10 ((shift) . 10))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
(setq scroll-step 1) ;; keyboard scroll one line at a time

#+END_SRC

* neotree

#+BEGIN_SRC emacs-lisp

;;neotree
(use-package neotree
  :ensure t
  :defer t
  :bind ("H-." . 'neotree-toggle)
        ("C-c n t" . 'neotree-toggle)
  :config
         (use-package all-the-icons
                 :ensure t
                 )
         (setq neo-theme (if (display-graphic-p) 'icons 'arrows))
					;          (setq neo-theme 'icons)
	 (setq neo-window-fixed-size nil)
)

(add-hook 'neotree-mode-hook 'my-neotree-hook)
(defun my-neotree-hook ()
  (nlinum-mode 0))

#+END_SRC

* company

#+BEGIN_SRC emacs-lisp

;;company
  (use-package company
    :ensure t
        :defer t
        :config (require 'company)

        (use-package company-c-headers
          :ensure t)

  (add-hook 'after-init-hook 'global-company-mode)
  (global-set-key (kbd "<backtab>") 'company-complete-common)
  (global-set-key (kbd "C-`") 'company-yasnippet)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous)
  (add-to-list 'company-backends 'company-c-headers))

#+END_SRC

* lua

#+BEGIN_SRC emacs-lisp

;;lua
(use-package lua-mode
  :ensure t
  :defer t)

(use-package company-lua
  :ensure t
  :defer 2
  :config;(require 'company-lua)
      ;(add-to-list 'company-backends 'company-lua)
  (eval-after-load 'company
    '(push 'company-lua company-backends)))

#+END_SRC
  
* ruby 

#+BEGIN_SRC emacs-lisp

(use-package inf-ruby
  :ensure t
  :defer t
)
(use-package robe
  :ensure t
  :defer t
  :bind ("C-c r s" . robe-start)
  :hook (ruby-mode . robe-mode)
)
;  (add-hook 'ruby-mode-hook 'robe-mode))

(eval-after-load 'company
  '(push 'company-robe company-backends))

#+END_SRC

* latex/auctex

#+BEGIN_SRC emacs-lisp

;;latex/auctex

  (use-package auctex
    :ensure t
    :defer t
    )
  (use-package  company-auctex
  :ensure t
  :config  (company-auctex-init)
  :defer 5
  )

  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

#+END_SRC

* web

#+BEGIN_SRC emacs-lisp
;web-mode

 (use-package web-mode
   :ensure t
   :mode (;;"\\.html\\'" 
          ;;"\\.css?\\'" 
          "\\.phtml\\'" 
          "\\.erb\\'" 
	  ;;"\\.html?\\'" 
          )
  
   :config
   (setq web-mode-markup-indent-offset 2)
 ;  (setq web-mode-engines-alist
 ;        '(("django" . "focus/.*\\.html\\'")
 ;          ("ctemplate" . "realtimecrm/.*\\.html\\'")))
   (setq web-mode-enable-auto-pairing nil)
 )

 (use-package company-web
   :config
   (add-hook 'web-mode-hook
             (lambda ()
               (add-to-list 'company-backends 'company-web-html)))
   (add-hook 'html-mode-hook
             (lambda ()
               (add-to-list 'company-backends 'company-web-html))))

(use-package emmet-mode
  :ensure t
  :hook (sgml-mode css-mode web-mode))

;(defadvice company-tern (before web-mode-set-up-ac-sources activate)
;  "Set `tern-mode' based on current language before running company-tern."
;  (if (equal major-mode 'web-mode)
;      (let ((web-mode-cur-language
;             (web-mode-language-at-pos)))
;        (if (string= web-mode-cur-language "javascript")
;            (unless tern-mode (tern-mode))
;          (if tern-mode (tern-mode ))))))

#+END_SRC

* javascript

  #+BEGIN_SRC emacs-lisp

   (use-package js2-mode
     :ensure t
     :defer t
      :mode "\\.js\\'"
     :interpreter "node"
     )

   (use-package company-tern
     :ensure t
     :defer 3
     :config
     (eval-after-load 'company
       '(push 'company-tern company-backends)))


  (use-package tern
    :ensure t
    :defer t
    :hook (web-mode js2-mode)
    :config
	(progn (defun kill-tern-process ()
		 "Kill the tern process if any. The process will be restarted.  This is useful if tern becomes unreachable."
		 (interactive)
		 (delete-process "Tern"))))

  ;      (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  #+END_SRC

* php

#+BEGIN_SRC emacs-lisp

(use-package php-mode
  :ensure t
  :mode "\\.php\\'"
  :config (require 'php-extras)
 )

(use-package company-php
  :ensure t
  :defer t)

;; (use-package php-extras
;;   :ensure t
;;   :defer t)

(eval-after-load 'php-mode
  (require 'php-extras))

(add-hook 'php-mode-hook
          '(lambda ()
             (require 'company-php)
             (company-mode t)
             (ac-php-core-eldoc-setup) ;; enable eldoc
             (make-local-variable 'company-backends)
             (add-to-list 'company-backends 'company-ac-php-backend)))
;(eval-after-load 'php-mode
;  (require 'php-extras))

#+END_SRC

* org
** org-fontify

#+BEGIN_SRC emacs-lisp

;;org fontify
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+END_SRC

** ox-md

#+BEGIN_SRC emacs-lisp
;org-md
 (eval-after-load "org"
  '(require 'ox-md nil t))

#+END_SRC

** ox-beamer

#+BEGIN_SRC emacs-lisp
;org-beamer
 (eval-after-load "org"
  '(require 'ox-beamer nil t))

#+END_SRC

** ox-odt

#+BEGIN_SRC emacs-lisp
;org-odt
 (eval-after-load "org"
  '(require 'ox-odt nil t))

#+END_SRC

** org-babel

#+BEGIN_SRC emacs-lisp
;org-babel
(if (version< emacs-version "26.0")
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . true) (python . true) (ruby .true)
   (emacs-lisp .true)))
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . true) (python . true) (ruby .true)
   (emacs-lisp .true))))

#+END_SRC

** ox-gfm

#+BEGIN_SRC emacs-lisp
;org-gfm
(use-package ox-gfm :ensure t :defer t)
(eval-after-load "org"
  '(require 'ox-gfm nil t))


#+END_SRC

** org-latex with pygment minted

#+BEGIN_SRC emacs-lisp
;org-latex
;pygment minted
;(require 'org-latex)
(require 'ox-latex)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

** htmlize

#+BEGIN_SRC emacs-lisp
;;(use-package org :ensure t)
(use-package htmlize :ensure t)
(setq org-html-html5-fancy t
org-html-doctype "html5")

(setq org-html-html5-fancy t
      org-html-doctype "html5")
;;; Loading custom backend
;(add-to-list 'load-path "lisp/")
;(load-file "~/.emacs.d/lisp/pelican-html.el")
(require 'pelican-html)

#+END_SRC

** xelatex

#+BEGIN_SRC emacs-lisp
(setq org-latex-to-pdf-process 
  '("xelatex -interaction nonstopmode %f"
     "xelatex -interaction nonstopmode %f")) ;; for multiple passes

#+END_SRC

** org-bullets

#+BEGIN_SRC emacs-lisp
;org-bullets
(use-package org-bullets 
  :ensure t
  :hook (org-mode . (lambda () (org-bullets-mode 1))))

#+END_SRC

** org-beautify

#+BEGIN_SRC emacs-lisp

;;org-beautify-theme
(use-package org-beautify-theme 
  :ensure t
  :defer t)
;;(add-hook 'org-mode-hook (if (display-graphic-p)(lambda () (load-theme 'org-beautify))))
(if (not (null (display-graphic-p))) (add-hook 'org-mode-hook (load-theme 'org-beautify)))
;;(add-hook 'org-mode-hook (load-theme 'org-beautify))
#+END_SRC

** org-tree-slide

#+BEGIN_SRC emacs-lisp

;;org-tree-slide
(use-package org-tree-slide
  :ensure t
  :defer t)
(define-key org-mode-map (kbd "<f8>") 'org-tree-slide-mode)
(define-key org-mode-map (kbd "S-<f8>") 'org-tree-slide-skip-done-toggle)

(with-eval-after-load "org-tree-slide"
  (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
  (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)
  )

#+END_SRC

** epresent

#+BEGIN_SRC emacs-lisp

;;epresent
(use-package epresent
  :ensure t
  :defer t)

#+END_SRC

* skewer
#+BEGIN_SRC emacs-lisp

(use-package skewer-mode
  :ensure t
  :defer t
  :init
  (skewer-setup))

;(use-package skewer-repl
;  :ensure t
;  :defer t
;  :config (define-key skewer-repl-mode-map (kbd "C-c C-z") #'quit-window))

#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp

(use-package projectile
  :ensure t
  :config
  (projectile-global-mode)
(setq projectile-completion-system 'ivy))

;; (use-package counsel-projectile
;;   :ensure t)
;; ;  :config
;  (counsel-projectile-on))


(add-hook 'prog-mode-hook 'projectile-mode)
;(add-hook 'projectile-mode-hook 'counsel-projectile-mode)

#+END_SRC

** hydra-projectile and hydra-projectile-other-window

#+BEGIN_SRC emacs-lisp

(defhydra hydra-projectile-other-window (:color teal)
  "projectile-other-window"
  ("f"  projectile-find-file-other-window        "file")
  ("g"  projectile-find-file-dwim-other-window   "file dwim")
  ("d"  projectile-find-dir-other-window         "dir")
  ("b"  projectile-switch-to-buffer-other-window "buffer")
  ("q"  nil                                      "cancel" :color blue))

(defhydra hydra-projectile (:color teal
                            :hint nil)
  "
     PROJECTILE: %(projectile-project-root)

     Find File            Search/Tags          Buffers                Cache
------------------------------------------------------------------------------------------
  _F_: file            _a_: ag                _i_: Ibuffer           _c_: cache clear
 _ff_: file dwim       _g_: update gtags      _b_: switch to buffer  _x_: remove known project
 _fd_: file curr dir   _o_: multi-occur     _s-k_: Kill all buffers  _X_: cleanup non-existing
  _r_: recent file                                               ^^^^_z_: cache current
  _d_: dir

"
  ("a"   projectile-ag)
  ("b"   projectile-switch-to-buffer)
  ("c"   projectile-invalidate-cache)
  ("d"   projectile-find-dir)
  ("F" projectile-find-file)
  ("ff"  projectile-find-file-dwim)
  ("fd"  projectile-find-file-in-directory)
  ("g"   ggtags-update-tags)
  ("s-g" ggtags-update-tags)
  ("i"   projectile-ibuffer)
  ("K"   projectile-kill-buffers)
  ("s-k" projectile-kill-buffers)
  ("m"   projectile-multi-occur)
  ("o"   projectile-multi-occur)
  ("s-p" projectile-switch-project "switch project")
  ("p"   projectile-switch-project)
  ("s"   projectile-switch-project)
  ("r"   projectile-recentf)
  ("x"   projectile-remove-known-project)
  ("X"   projectile-cleanup-known-projects)
  ("z"   projectile-cache-current-file)
  ("`"   hydra-projectile-other-window/body "other window")
  ("q"   nil "cancel" :color blue))

#+END_SRC

